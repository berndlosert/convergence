import algebra.group.defs
import data.set.basic
import data.set.finite
import data.set.prod
import data.set.pointwise
import algebra.support
import order.complete_lattice
import order.filter.basic
import order.filter.pointwise

open filter function
open_locale filter pointwise

variables {Œ± Œ≤ G M : Type*}

/-!
### Partial scalar actions
-/

/-- Typeclass for partial scalar actions. `smul_defined a x` means that `a ‚Ä¢ x` is defined. -/
class has_partial_smul (M Œ± : Type*) extends has_smul M Œ± :=
(smul_defined : M ‚Üí Œ± ‚Üí Prop)

export has_partial_smul

/-- The domain of defintion of a partial action. -/
def smul_dom (M Œ± : Type*) [has_partial_smul M Œ±] := { p : M √ó Œ± | smul_defined p.1 p.2 }

lemma smul_dom_mem_iff [has_partial_smul M Œ±] {a : M} {x : Œ±} :
  smul_defined a x ‚Üî (a, x) ‚àà smul_dom M Œ± := by tautology

/-- The partial_smul of two sets. -/
def set.partial_smul [has_partial_smul M Œ±] (t : set M) (s : set Œ±) : set Œ± :=
  (Œª p : M √ó Œ±, p.1 ‚Ä¢ p.2) '' ((t √óÀ¢ s) ‚à© smul_dom M Œ±)

/-- The partial scalar multiplication of two filters. -/
def filter.partial_smul [has_partial_smul M Œ±] 
  (g : filter M) (f : filter Œ±) : filter Œ± := 
map (Œª p : M √ó Œ±, p.1 ‚Ä¢ p.2) ((g √ó·∂† f) ‚äì ùìü (smul_dom M Œ±))  

/-- Typeclass for partial actions of groups. -/
class partial_mul_action (G Œ± : Type*) [group G]
  extends has_partial_smul G Œ± :=
(one_smul : ‚àÄ (x : Œ±), smul_defined 1 x ‚àß (1 : G) ‚Ä¢ x = x)
(mul_smul : ‚àÄ {a b : G} {x : Œ±}, smul_defined b x ‚Üí smul_defined a (b ‚Ä¢ x) ‚Üí
  smul_defined (a * b) x ‚àß (a * b) ‚Ä¢ x = a ‚Ä¢ (b ‚Ä¢ x))
(inv_smul_cancel_left : ‚àÄ {a : G} {x y : Œ±}, 
  smul_defined a x ‚Üí a ‚Ä¢ x = y ‚Üí smul_defined a‚Åª¬π y ‚àß x = a‚Åª¬π ‚Ä¢ y)

export partial_mul_action

lemma partial_mul_action.injective [group G] [partial_mul_action G Œ±]:
  ‚àÄ {a : G} {x y : Œ±}, smul_defined a x ‚Üí smul_defined a y ‚Üí a ‚Ä¢ x = a ‚Ä¢ y ‚Üí x = y :=
begin
  intros a x y hdef‚ÇÅ hdef‚ÇÇ heq‚ÇÅ,
  obtain ‚ü®hdef‚ÇÉ, heq‚ÇÇ‚ü© := inv_smul_cancel_left hdef‚ÇÅ heq‚ÇÅ,
  obtain ‚ü®hdef‚ÇÑ, heq‚ÇÉ‚ü© := mul_smul hdef‚ÇÇ hdef‚ÇÉ,
  simp [(one_smul y).2] at heq‚ÇÉ,
  exact (rfl.congr (eq.symm heq‚ÇÉ)).mp heq‚ÇÇ,
end

/-!
### Enveloping action
-/

def envelope (G Œ± : Type*) [group G] [partial_mul_action G Œ±] : G √ó Œ± ‚Üí G √ó Œ± ‚Üí Prop :=
 Œª ‚ü®a, x‚ü© ‚ü®b, y‚ü©, smul_defined (b‚Åª¬π * a) x ‚àß (b‚Åª¬π * a) ‚Ä¢ x = y

namespace envelope

abbreviation space (G Œ± : Type*) [group G] [partial_mul_action G Œ±] := quot (envelope G Œ±)

def embed (G : Type*) {Œ± : Type*} [group G] [partial_mul_action G Œ±]
  (x : Œ±) : space G Œ± := quot.mk (envelope G Œ±) (1, x)

variables [group G] [partial_mul_action G Œ±]

lemma is_reflexive : reflexive (envelope G Œ±) := 
begin
  rintro (‚ü®a, x‚ü© : G √ó Œ±),
  unfold envelope, simp,
  exact one_smul x,
end

lemma is_symmetric : symmetric (envelope G Œ±) :=
begin
  rintro ‚ü®a, x‚ü© ‚ü®b, y‚ü©,
  unfold envelope, rintro ‚ü®hdef, heq‚ü©,
  obtain ‚ü®hdef', heq'‚ü© := inv_smul_cancel_left hdef heq,
  simp at *, exact ‚ü®hdef', eq.symm heq'‚ü©,
end

lemma is_transitive : transitive (envelope G Œ±) := 
begin
  rintro ‚ü®a, x‚ü© ‚ü®b, y‚ü© ‚ü®c, z‚ü© : G √ó Œ±,
  unfold envelope,
  rintro ‚ü®hdef‚ÇÅ, heq‚ÇÅ‚ü© ‚ü®hdef‚ÇÇ, heq‚ÇÇ‚ü©,
  rw [‚Üê heq‚ÇÅ] at hdef‚ÇÇ,
  rw [‚Üê heq‚ÇÅ] at heq‚ÇÇ,
  obtain ‚ü®hdef‚ÇÉ, heq‚ÇÉ‚ü© := mul_smul hdef‚ÇÅ hdef‚ÇÇ,
  simp [mul_assoc] at hdef‚ÇÉ,
  simp [mul_assoc, heq‚ÇÇ] at heq‚ÇÉ,
  exact ‚ü®hdef‚ÇÉ, heq‚ÇÉ‚ü©,
end

lemma is_equivalence : equivalence (envelope G Œ±) := ‚ü®is_reflexive, is_symmetric, is_transitive‚ü©

instance : setoid (G √ó Œ±) := 
{ r := envelope G Œ±,
  iseqv := is_equivalence }

instance : has_smul G (G √ó Œ±) := ‚ü®Œª a ‚ü®b, x‚ü©, (a * b, x)‚ü©

lemma act_congr (a : G) (bx cy : G √ó Œ±) (heq : bx ‚âà cy) : a ‚Ä¢ bx ‚âà a ‚Ä¢ cy := 
begin
  obtain ‚ü®b, x‚ü© := bx,
  obtain ‚ü®c, y‚ü© := cy,
  change smul_defined ((a * c)‚Åª¬π * (a * b)) x ‚àß ((a * c)‚Åª¬π * (a * b)) ‚Ä¢ x = y,
  simp [mul_assoc],
  assumption,
end

lemma act_congr_sound (a : G) (bx cy : G √ó Œ±) (heq : bx ‚âà cy) : 
  ‚ü¶a ‚Ä¢ bx‚üß = ‚ü¶a ‚Ä¢ cy‚üß :=
quotient.sound (act_congr a bx cy heq)

def act_lifted (a : G) (bx : G √ó Œ±) : space G Œ± := ‚ü¶a ‚Ä¢ bx‚üß

instance : has_smul G (space G Œ±) :=
‚ü®Œª a bx, quotient.lift (act_lifted a) (act_congr_sound a) bx‚ü©

end envelope  

/-!
### Extra set stuff
-/

namespace set

lemma mem_pair_iff {x y z : Œ±} : x ‚àà ({y, z} : set Œ±) ‚Üî x = y ‚à® x = z := by simp

lemma subset_eq_nonempty {s t : set Œ±} (hsub : t ‚äÜ s) (hne : t.nonempty) : s.nonempty :=
begin
  rw ‚Üê empty_ssubset at *,
  exact ssubset_of_ssubset_of_subset hne hsub,
end

lemma ne_empty_iff_exists_elem {s : set Œ±} : ¬¨ (s = ‚àÖ) ‚Üî ‚àÉ x, x ‚àà s :=
begin
  split,
  { intros hne, 
    change s ‚â† ‚àÖ at hne, 
    rw [ne_empty_iff_nonempty, nonempty_def] at hne, 
    assumption },
  { intros hexists, 
    change s ‚â† ‚àÖ, 
    rw ne_empty_iff_nonempty,
    exact nonempty_def.mpr hexists }
end

end set


/-!
### Extra lattice stuff
-/

lemma Sup_image_le [complete_semilattice_Sup Œ≤] 
  {f g : Œ± ‚Üí Œ≤} (hle : f ‚â§ g) (s : set Œ±) : Sup (f '' s) ‚â§ Sup (g '' s) :=
begin
  refine Sup_le_Sup_of_forall_exists_le _,
  intros y hy,
  obtain ‚ü®x, hx, heq‚ü© := set.mem_image_iff_bex.mp hy,
  use g x, refine ‚ü®set.mem_image_of_mem g hx, _‚ü©,
  rw ‚Üê heq, exact hle x,
end

/-!
### Extra filter stuff
-/

namespace filter

lemma inf_neq_bot_iff {f g : filter Œ±} : 
  (f ‚äì g) ‚â† ‚ä• ‚Üî ‚àÄ (s ‚àà f) (t ‚àà g), s ‚à© t ‚â† ‚àÖ :=
begin
  let hiff := iff.not inf_eq_bot_iff,
  push_neg at hiff,
  assumption,
end

lemma prod_inf_principal_mem_iff {f : filter Œ±} {g : filter Œ≤} {s : set (Œ± √ó Œ≤)} :
  ‚àÄ t, t ‚àà (f √ó·∂† g) ‚äì ùìü s ‚Üî ‚àÉ (u ‚àà f) (v ‚àà g), (u √óÀ¢ v) ‚à© s ‚äÜ t :=
begin
  intros t,
  split,
  { intro hmem,
    obtain ‚ü®l, hl, r, hr, heq‚ü© := mem_inf_iff.mp hmem,
    obtain ‚ü®u, hu, v, hv, hsub‚ü© := mem_prod_iff.mp hl,
    let hsub' := mem_principal.mp hr,
    let hsub'' := set.inter_subset_inter hsub hsub',
    rw ‚Üê heq at hsub'',
    exact ‚ü®u, hu, v, hv, hsub''‚ü©,
  },
  { rintro ‚ü®u, hu, v, hv, hsub‚ü©,
    rw mem_inf_iff_superset,
    have hsub' : u √óÀ¢ v ‚àà f √ó·∂† g := 
      mem_prod_iff.mpr ‚ü®u, hu, v, hv, subset_refl (u √óÀ¢ v) ‚ü©,
    exact ‚ü®u √óÀ¢ v, hsub', s, mem_principal_self s, hsub‚ü©,
  },
end

lemma inf_ne_bot {f g : filter Œ±} [f.ne_bot] (hle : f ‚â§ g) : (f ‚äì g).ne_bot :=
begin
  rw inf_of_le_left hle,
  assumption
end

/-!
### Extra filter pointwise stuff
-/

lemma mem_inv_iff [_root_.has_involutive_inv Œ±] {f : filter Œ±} {s : set Œ±} :
  s ‚àà f‚Åª¬π ‚Üî ‚àÉ t ‚àà f, t‚Åª¬π ‚äÜ s :=
begin
  split,
  { assume hmem,
    change s ‚àà map has_inv.inv f at hmem,
    rw mem_map_iff_exists_image at hmem,
    obtain ‚ü®t, ht, hsub‚ü© := hmem,
    rw [set.image_inv] at hsub,
    exact ‚ü®t, ht, hsub‚ü© },
  { rintro ‚ü®t, ht, hsub‚ü©,
    exact mem_of_superset (filter.inv_mem_inv ht) hsub }
end

lemma mem_inv_smul_iff [has_smul G Œ±] [_root_.has_involutive_inv G] {g : filter G} {f : filter Œ±} {u : set Œ±} :
  u ‚àà g‚Åª¬π ‚Ä¢ f ‚Üî ‚àÉ t s, t ‚àà g ‚àß s ‚àà f ‚àß t‚Åª¬π ‚Ä¢ s ‚äÜ u :=
begin
  split,
  { intros hmem,
    obtain ‚ü®t', s, ht', hs, hsub‚ü© := mem_smul.mp hmem,
    rw mem_inv_iff at ht',
    obtain ‚ü®t, ht, hsub'‚ü© := ht',
    refine ‚ü®t, s, ht, hs, _‚ü©,
    exact subset_trans (set.smul_subset_smul_right hsub') hsub },
  { rintros ‚ü®t, s, ht, hs, hsub‚ü©,
    have ht' : t‚Åª¬π ‚àà g‚Åª¬π := inv_mem_inv ht,
    rw filter.mem_smul,
    refine ‚ü®t‚Åª¬π, s, ht', hs, hsub‚ü© }
end

lemma inv_smul_inf_ne_bot [group G] [mul_action G Œ±] {g : filter G} {f f' : filter Œ±} 
  (hle : f' ‚â§ g ‚Ä¢ f) [hf' : f'.ne_bot] : ((g‚Åª¬π ‚Ä¢ f') ‚äì f).ne_bot :=
begin
  rw ‚Üê forall_mem_nonempty_iff_ne_bot,
  intros s hmem,
  obtain ‚ü®s‚ÇÅ, hs‚ÇÅ, s‚ÇÇ, hs‚ÇÇ, hsub‚ÇÅ‚ü© := mem_inf_iff_superset.mp hmem,
  obtain ‚ü®t‚ÇÅ, s‚ÇÉ, ht‚ÇÅ, hs‚ÇÉ, hsub‚ÇÇ‚ü© := mem_inv_smul_iff.mp hs‚ÇÅ,
  refine set.subset_eq_nonempty hsub‚ÇÅ _,
  refine set.subset_eq_nonempty (set.inter_subset_inter_left s‚ÇÇ hsub‚ÇÇ) _,
  let s‚ÇÑ : set Œ± := s‚ÇÉ ‚à© (t‚ÇÅ ‚Ä¢ s‚ÇÇ),
  have hne : s‚ÇÑ.nonempty, 
    from forall_mem_nonempty_iff_ne_bot.mpr hf' s‚ÇÑ
      (f'.inter_sets hs‚ÇÉ (filter.le_def.mp hle (t‚ÇÅ ‚Ä¢ s‚ÇÇ) (filter.smul_mem_smul ht‚ÇÅ hs‚ÇÇ))),
  obtain ‚ü®y, hy‚ü© := set.nonempty_def.mp hne,
  rw set.nonempty_def,
  obtain ‚ü®hy‚ÇÅ, hy‚ÇÇ‚ü© := hy,
  change y ‚àà set.image2 (‚Ä¢) t‚ÇÅ s‚ÇÇ at hy‚ÇÇ,
  obtain ‚ü®a, x, ha, hx, hy'‚ü© := set.mem_image2.mp hy‚ÇÇ,
  have heq' : a‚Åª¬π ‚Ä¢ y = x, by simp [‚Üê hy', ‚Üê mul_action.mul_smul],
  have hmem' : x ‚àà t‚ÇÅ‚Åª¬π ‚Ä¢ s‚ÇÉ,
  begin
    simp [‚Üê heq'],
    have : a‚Åª¬π ‚àà has_inv.inv '' t‚ÇÅ, from set.mem_image_of_mem (has_inv.inv) ha,
    have : a‚Åª¬π ‚àà t‚ÇÅ‚Åª¬π, by rwa set.image_inv at this, 
    exact set.mem_image2_of_mem this hy‚ÇÅ,
  end,
  exact ‚ü®x, hmem', hx‚ü©,
end

-- lemma mem_partial_smul_of_le_iff [has_partial_smul M Œ±] {g : filter M} {f : filter Œ±} {h : ultrafilter Œ±}
--   (hle : ‚Üëh ‚â§ partial_smul g f) {s : set Œ±} :
--   s ‚àà h ‚Üî ‚àÉ t s, t ‚àà g ‚àß s ‚àà f ‚àß 
end filter