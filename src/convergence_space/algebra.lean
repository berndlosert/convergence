import tactic
import order.filter.partial
import convergence_space.basic
import data.set.pointwise
import order.filter.pointwise
import extra

noncomputable theory
open set filter classical option function prod
open convergence_space
open_locale classical filter pointwise

variables {M G Œ± Œ≤ Œ≥ : Type*}

/-!
### Convergence semigroups, monoids, groups
-/

/-- Basic hypothesis to talk about a convergence monoid or a convergence
  semigroup. A convergence monoid over `M`, for example, is obtained by
  requiring both the instances monoid `M` and has_continuous_mul `M`. -/
class has_continuous_mul (Œ± : Type*)
  [convergence_space Œ±] [has_mul Œ±] : Prop :=
(continuous_mul : continuous2 ((*) : Œ± ‚Üí Œ± ‚Üí Œ±))

open has_continuous_mul

/-- Class `has_continuous_smul M Œ±` says that the scalar multiplication
  `(‚Ä¢) : M ‚Üí Œ± ‚Üí Œ±` is continuous in both arguments. -/
class has_continuous_smul (M Œ± : Type*)
  [has_smul M Œ±] [convergence_space M] [convergence_space Œ±] : Prop :=
(continuous_smul : continuous2 ((‚Ä¢) : M ‚Üí Œ± ‚Üí Œ±))

open has_continuous_smul

/-- A convergence group is a group in which the multiplication and inversion
  operations are continuous. -/
class convergence_group (G : Type*)
  [convergence_space G] [group G] extends has_continuous_mul G : Prop :=
(continuous_inv : continuous (has_inv.inv : G ‚Üí G))

open convergence_group

/-- Class `has_continuous_partial_smul M Œ±` says that the partial scalar multiplication
  is continuous on `smul_dom`. -/
class has_continuous_partial_smul (M Œ± : Type*) [has_partial_smul M Œ±]
  [convergence_space M] [convergence_space Œ±] : Prop :=
(continuous_partial_smul : ‚àÄ {a : M} {x : Œ±} {g : filter M} {f : filter Œ±},
  converges g a ‚Üí converges f x ‚Üí smul_defined a x ‚Üí converges (partial_smul g f) (a ‚Ä¢ x))

export has_continuous_partial_smul

/-!
### Enveloping action
-/

namespace envelope

variables [group G] [partial_mul_action G Œ±]
variables [convergence_space G] [convergence_group G]
variables [convergence_space Œ±]

lemma embed.continuous : continuous (embed G : Œ± ‚Üí space G Œ±) := 
continuous.comp continuous_quot_mk (continuous.prod.mk 1)

instance : has_continuous_smul G (G √ó Œ±) :=
{ continuous_smul :=
  begin
    rw continuous2_continuous_iff,
    unfold continuous,
    rintro ‚ü®a‚ÇÅ, ‚ü®a‚ÇÇ, x‚ü©‚ü© : G √ó (G √ó Œ±),
    rintro k : filter (G √ó (G √ó Œ±)),
    rintro hk : converges k (a‚ÇÅ, (a‚ÇÇ, x)),
    let act : G √ó (G √ó Œ±) ‚Üí G √ó Œ± := uncurry has_smul.smul,
    let mul : G √ó G ‚Üí G := uncurry has_mul.mul,
    let rlassoc := (equiv.prod_assoc G G Œ±).symm.to_fun,
    have heq : act = prod.map mul id ‚àò rlassoc, by { funext; tidy },
    let g‚ÇÅ : filter G := map fst k,
    let hg‚ÇÅ : converges g‚ÇÅ a‚ÇÅ := hk.1,
    let g‚ÇÇ : filter G := map (fst ‚àò snd) k,
    let hg‚ÇÇ : converges g‚ÇÇ a‚ÇÇ := hk.2.1,
    let f : filter Œ± := map (snd ‚àò snd) k,
    let hf : converges f x := hk.2.2,
    let g : filter (G √ó G) := g‚ÇÅ √ó·∂† g‚ÇÇ,
    let a : G √ó G := (a‚ÇÅ, a‚ÇÇ),
    have hg : converges g a := prod.converges hg‚ÇÅ hg‚ÇÇ,
    have : converges (map mul g) (mul a), from continuous2_continuous_iff.mp continuous_mul hg,
    have hconv : converges (map mul g √ó·∂† f) (mul a, x), from prod.converges this hf,
    have hle : k ‚â§ g‚ÇÅ √ó·∂† (g‚ÇÇ √ó·∂† f), from calc
      k ‚â§ map fst k √ó·∂† map snd k : filter.le_prod_map_fst_snd
      ... = g‚ÇÅ √ó·∂† map snd k : by tauto
      ... ‚â§ g‚ÇÅ √ó·∂† (map fst (map snd k) √ó·∂† map snd (map snd k)) :
        prod_mono (le_refl g‚ÇÅ) filter.le_prod_map_fst_snd
      ... = g‚ÇÅ √ó·∂† (map (fst ‚àò snd) k √ó·∂† map (snd ‚àò snd) k) :
        by simp [filter.map_map]
      ... = g‚ÇÅ √ó·∂† (g‚ÇÇ √ó·∂† f) : by tauto,
    have heq' : map act (g‚ÇÅ √ó·∂† (g‚ÇÇ √ó·∂† f)) = map mul g √ó·∂† f, from calc
      map act (g‚ÇÅ √ó·∂† (g‚ÇÇ √ó·∂† f)) = map (prod.map mul id ‚àò rlassoc) (g‚ÇÅ √ó·∂† (g‚ÇÇ √ó·∂† f)) :
        by rw heq
      ... = map (prod.map mul id) (map rlassoc (g‚ÇÅ √ó·∂† (g‚ÇÇ √ó·∂† f))) :
        by simp [‚Üê filter.map_map]
      ... = map (prod.map mul id) (map (equiv.prod_assoc G G Œ±).symm (g‚ÇÅ √ó·∂† (g‚ÇÇ √ó·∂† f))) :
        by tauto
      ... = map (prod.map mul id) ((g‚ÇÅ √ó·∂† g‚ÇÇ) √ó·∂† f) :
        by simp [‚Üê prod_assoc, filter.map_map]
      ... = map mul g √ó·∂† f :
        by simp [‚Üê filter.prod_map_map_eq'],
    have hle' : map act k ‚â§ map mul g √ó·∂† f, from eq.subst heq' (map_mono hle),
    exact le_converges hle' hconv,
  end }

instance
[convergence_space G] [convergence_group G]
[convergence_space Œ±] [partial_mul_action G Œ±] [has_continuous_partial_smul G Œ±] :
has_continuous_smul G (space G Œ±) :=
{ continuous_smul :=
  begin
    let act : G √ó (G √ó Œ±) ‚Üí (G √ó Œ±) := uncurry (‚Ä¢),
    let qact : G √ó space G Œ± ‚Üí space G Œ± := uncurry (‚Ä¢),
    let idquot : G √ó (G √ó Œ±) ‚Üí G √ó space G Œ± := 
      prod.map id (quot.mk (envelope G Œ±)),
    let quot_mk : G √ó Œ± ‚Üí space G Œ± := quot.mk (envelope G Œ±),
    have heq : qact ‚àò idquot = quot_mk ‚àò act, by { funext, tidy },
    have hqmap : quotient_map idquot, 
      from quotient_map.prod_map quotient_map.id quotient_map_quot_mk,
    have hcontr : continuous (quot_mk ‚àò act), 
      from continuous.comp continuous_quot_mk (continuous2_continuous_iff.mp has_continuous_smul.continuous_smul),
    have hcont : continuous qact, begin
      rw [quotient_map.continuous_iff hqmap, heq],
      assumption,
    end,
    exact continuous2_continuous_iff.mpr hcont,
  end }

end envelope

/-!
### Adherence restrictive
-/

/-- A continuous action of a monoid `G` on `Œ±` is adherence restrictive if for all convergent
  filters `g` on `G` and all filters `f` on `Œ±` with `adh f = ‚àÖ`, `adh (g ‚Ä¢ f) = ‚àÖ`. -/
def adh_restrictive (G : Type*) (Œ± : Type*) [group G] [convergence_space G] 
  [convergence_group G] [convergence_space Œ±] [mul_action G Œ±] [has_continuous_smul G Œ±] : Prop :=
‚àÄ {g : filter G} {f : filter Œ±} {a : G}, g.ne_bot ‚àß converges g a ‚àß adh f = ‚àÖ ‚Üí adh (g ‚Ä¢ f) = ‚àÖ

/-- This is a weaker version of `adh_restrictive` where instead of considering the adherence in `Œ±`,
  it considers the adherence in the enveloping space. -/
def weakly_adh_restrictive (G : Type*) (Œ± : Type*) [group G] [convergence_space G] [convergence_group G] 
  [convergence_space Œ±] [partial_mul_action G Œ±] [has_continuous_partial_smul G Œ±] : Prop :=
‚àÄ {g : filter G} {f : filter Œ±} {a : G}, g.ne_bot ‚Üí converges g a ‚Üí ((g √ó·∂† f) ‚äì ùìü (smul_dom G Œ±)).ne_bot
  ‚Üí adh (map (envelope.embed G) f) = ‚àÖ ‚Üí adh (partial_smul g f) = ‚àÖ

lemma not_adh_restrictive (G : Type*) (Œ± : Type*) [group G] [convergence_space G] 
  [convergence_group G] [convergence_space Œ±] [mul_action G Œ±] [has_continuous_smul G Œ±] :
  ¬¨ (adh_restrictive G Œ±) ‚Üí ‚àÉ (g : filter G) (f : filter Œ±) (a : G) (x : Œ±), 
    g.ne_bot ‚àß converges g a ‚àß adh f = ‚àÖ ‚àß x ‚àà adh (g ‚Ä¢ f) :=
begin
  intro hcontra,
  unfold adh_restrictive at hcontra,
  rw not_forall at hcontra,
  obtain ‚ü®g, rest‚ÇÅ‚ü© := hcontra,
  rw not_forall at rest‚ÇÅ,
  obtain ‚ü®f, rest‚ÇÇ‚ü© := rest‚ÇÅ,
  rw not_forall at rest‚ÇÇ,
  obtain ‚ü®a, rest‚ÇÉ‚ü© := rest‚ÇÇ,
  rw not_imp at rest‚ÇÉ,
  obtain ‚ü®‚ü®hnb, hconv, hadh‚ü©, rest‚ÇÑ‚ü© := rest‚ÇÉ,
  rw set.eq_empty_iff_forall_not_mem at rest‚ÇÑ,
  rw not_forall at rest‚ÇÑ,
  obtain ‚ü®x, hmem‚ü© := rest‚ÇÑ,
  rw set.not_not_mem at hmem,
  exact ‚ü®g, f, a, x, hnb, hconv, hadh, hmem‚ü©,
end

lemma adh_restrictive_result {G Œ± : Type*} [group G] [convergence_space G] [convergence_group G] 
  [convergence_space Œ±] [mul_action G Œ±] [has_continuous_smul G Œ±] : 
  adh_restrictive G Œ± :=
classical.by_contradiction 
begin
  assume hcontra : ¬¨ adh_restrictive G Œ±,
  obtain ‚ü®g, f, a, x, hnb, hconv, hadh, hmem‚ü© := not_adh_restrictive G Œ± hcontra,
  haveI : g.ne_bot := hnb,
  change x ‚àà adh (g ‚Ä¢ f) at hmem,
  change adheres (g ‚Ä¢ f) x at hmem,
  unfold adheres at hmem,
  obtain ‚ü®h', hnb', hle', hconv'‚ü© := hmem,
  haveI : h'.ne_bot := hnb',
  let k' := ultrafilter.of h',
  have hle'' : ‚Üëk' ‚â§ g ‚Ä¢ f, from (le_trans (ultrafilter.of_le h') hle'),
  set k : filter Œ± := g‚Åª¬π ‚Ä¢ ‚Üëk' with hdef,
  haveI : k.ne_bot := filter.ne_bot.smul (filter.ne_bot_inv_iff.mpr hnb) k'.ne_bot,
  have hconv : converges k (a‚Åª¬π ‚Ä¢ x),
  begin
    have hconv_inv_g : converges g‚Åª¬π a‚Åª¬π, from continuous_inv hconv,
    have hconv_k' : converges ‚Üëk' x, 
      from le_converges (ultrafilter.of_le h') hconv',
    exact continuous_smul hconv_inv_g hconv_k',
  end,
  have hmem : a‚Åª¬π ‚Ä¢ x ‚àà adh f, 
  begin
    have hconv' : converges (k ‚äì f) (a‚Åª¬π ‚Ä¢ x), 
      from le_converges inf_le_left hconv,
    haveI hnbI : (k ‚äì f).ne_bot := filter.inv_smul_inf_ne_bot hle'',
    have hadh'' : adheres f (a‚Åª¬π ‚Ä¢ x) := ‚ü®k ‚äì f, hnbI, inf_le_right, hconv'‚ü©,
    assumption,
  end,
  rw set.eq_empty_iff_forall_not_mem at hadh,
  unfold adh at hadh,
  exact absurd hmem (hadh (a‚Åª¬π ‚Ä¢ x)),
end

lemma weakly_adh_restrictive_result {G Œ± : Type*} [group G] [convergence_space G] [convergence_group G] 
  [convergence_space Œ±] [partial_mul_action G Œ±] 
  [has_continuous_partial_smul G Œ±] : weakly_adh_restrictive G Œ± :=
begin
  intros g f a hgnb hgconv hnb,
  haveI : g.ne_bot := hgnb,
  rw ‚Üê not_imp_not,
  intro hadh,
  obtain ‚ü®x, hx‚ü© := ne_empty_iff_exists_elem.mp hadh,
  change adheres (partial_smul g f) x at hx,
  rw adheres.exists_ultrafilter (partial_smul g f) x at hx,
  obtain ‚ü®h, hle, hconv‚ü© := hx,
  have hconv' : converges (g‚Åª¬π ‚Ä¢ map (envelope.embed G) ‚Üëh) (a‚Åª¬π ‚Ä¢ envelope.embed G x) :=
    continuous_smul (continuous_inv hgconv) (envelope.embed.continuous hconv),
  have hmem : a‚Åª¬π ‚Ä¢ envelope.embed G x ‚àà adh (map (envelope.embed G) f) :=
  begin
    change adheres (map (envelope.embed G) f) (a‚Åª¬π ‚Ä¢ envelope.embed G x),
    change ‚àÉ (f' : filter (envelope.space G Œ±)) [f'.ne_bot], f' ‚â§ map (envelope.embed G) f ‚àß converges f' (a‚Åª¬π ‚Ä¢ envelope.embed G x),
    let f' := g‚Åª¬π ‚Ä¢ filter.map (envelope.embed G) ‚Üëh ‚äì map (envelope.embed G) f, use f', split,
    { rw inf_ne_bot_iff,
      intros s hs s' hs',
      rw filter.mem_inv_smul_iff at hs,
      obtain ‚ü®t, s‚ÇÅ, ht, hs‚ÇÅ, hsub‚ü© := hs,
      rw filter.mem_map_iff_exists_image at *,
    }
    -- { rw ‚Üê filter.forall_mem_nonempty_iff_ne_bot,
    --   intros s hs,
    --   rw filter.mem_inf_iff at hs,
    --   obtain ‚ü®t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, heq‚ü© := hs,
    --   obtain ‚ü®s‚ÇÅ, s‚ÇÇ, hs‚ÇÅ, hs‚ÇÇ, hsub‚ü© := filter.mem_smul.mp ht‚ÇÅ,
    --   obtain ‚ü®u‚ÇÅ, hu‚ÇÅ, hsub'‚ü© := (filter.mem_inv_iff s‚ÇÅ).mp hs‚ÇÅ,
    --   obtain ‚ü®u‚ÇÇ, hu‚ÇÇ, hsub''‚ü© := filter.mem_map_iff_exists_image.mp hs‚ÇÇ,
    --   sorry },
    split,
    { exact inf_le_right },
    { exact le_converges inf_le_left hconv' },
  end,
  rw ne_empty_iff_exists_elem,
  exact ‚ü®a‚Åª¬π ‚Ä¢ envelope.embed G x, hmem‚ü©
end